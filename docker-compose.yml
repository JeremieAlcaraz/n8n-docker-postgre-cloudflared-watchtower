version: "3.8"

services:
  # ==============================================
  # Service: n8n-db
  # PostgreSQL 16 Alpine pour n8n
  # ==============================================
  n8n-db:
    image: postgres:16-alpine
    container_name: n8n-db
    restart: always
    env_file:
      - .env.n8n
    volumes:
      - n8n_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "${DB_POSTGRESDB_HOST}", "-U", "${DB_POSTGRESDB_USER}", "-d", "${DB_POSTGRESDB_DATABASE}", "-q"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 10

  # ==============================================
  # Service: n8n
  # Exécution des workflows n8n
  # ==============================================
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    restart: always
    depends_on:
      n8n-db:
        condition: service_healthy
    env_file:
      - .env.n8n
    environment:
      # on calcule le hostname et le webhook URL
      - N8N_HOST=${N8N_SUBDOMAIN}.${DOMAIN}
      - WEBHOOK_URL=${N8N_PROTOCOL}://${N8N_SUBDOMAIN}.${DOMAIN}
      # on réutilise le reste des variables définies dans .env.n8n
      - N8N_PORT
      - N8N_PROTOCOL
      - GENERIC_TIMEZONE
      - DB_TYPE
      - DB_POSTGRESDB_HOST
      - DB_POSTGRESDB_DATABASE
      - DB_POSTGRESDB_USER
      - DB_POSTGRESDB_PASSWORD
    volumes:
      - n8n_data:/home/node/.n8n

  # ==============================================
  # Service: cloudflared
  # Tunnel Cloudflare pour n8n & Guacamole
  # ==============================================
  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared
    restart: unless-stopped
    env_file:
      - .env.cloudflare
    volumes:
      - ./cloudflared:/etc/cloudflared
    command: tunnel --no-autoupdate run --token ${TUNNEL_TOKEN}

  # ==============================================
  # Service: watchtower
  # Mise à jour auto. des conteneurs Docker
  # ==============================================
  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval 300

  # ==============================================
  # Service: guac-db
  # PostgreSQL 16 Alpine pour Guacamole
  # ==============================================
  guac-db:
    image: postgres:16-alpine
    container_name: guac-db
    restart: always
    env_file:
      - .env.guacamole
    volumes:
      - guac_db_data:/var/lib/postgresql/data
      - ./initdb.sql:/docker-entrypoint-initdb.d/initdb.sql:ro
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "${POSTGRESQL_HOSTNAME}", "-U", "${POSTGRESQL_USER}", "-d", "${POSTGRESQL_DATABASE}", "-q"]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 10

  # ==============================================
  # Service: guacd
  # Daemon pour les sessions RDP/VNC/…
  # ==============================================
  guacd:
    image: guacamole/guacd:1.5.2
    container_name: guacd
    restart: always

  # ==============================================
  # Service: guacamole
  # Interface web Apache Guacamole (port 8080)
  # ==============================================
  guacamole:
    image: guacamole/guacamole:1.5.2
    container_name: guacamole
    restart: always
    depends_on:
      guacd:
        condition: service_started
      guac-db:
        condition: service_healthy
    ports:
      - "8080:8080"
    env_file:
      - .env.guacamole
    environment:
      # (optionnel) si vous voulez que l’appli sache son URL publique
      - GUACAMOLE_HOST=${GUACAMOLE_SUBDOMAIN}.${DOMAIN}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/guacamole"]
      interval: 30s
      timeout: 10s
      retries: 5

volumes:
  n8n_data:
  n8n_db_data:
  guac_db_data:
